package com.ocpay.wallet.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ocpay.wallet.greendao.NotificationBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NOTIFICATION_BEAN".
*/
public class NotificationBeanDao extends AbstractDao<NotificationBean, Long> {

    public static final String TABLENAME = "NOTIFICATION_BEAN";

    /**
     * Properties of entity NotificationBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property TimeStamp = new Property(4, String.class, "timeStamp", false, "TIME_STAMP");
        public final static Property ReceiveTimestamp = new Property(5, String.class, "receiveTimestamp", false, "RECEIVE_TIMESTAMP");
        public final static Property Read = new Property(6, boolean.class, "read", false, "READ");
        public final static Property NotificationType = new Property(7, String.class, "notificationType", false, "NOTIFICATION_TYPE");
        public final static Property TxHash = new Property(8, String.class, "txHash", false, "TX_HASH");
        public final static Property Transceiver = new Property(9, String.class, "transceiver", false, "TRANSCEIVER");
        public final static Property TransceiverDescription = new Property(10, String.class, "transceiverDescription", false, "TRANSCEIVER_DESCRIPTION");
        public final static Property BlockNumber = new Property(11, String.class, "blockNumber", false, "BLOCK_NUMBER");
    }


    public NotificationBeanDao(DaoConfig config) {
        super(config);
    }
    
    public NotificationBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NOTIFICATION_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"CONTENT\" TEXT," + // 2: content
                "\"DESCRIPTION\" TEXT," + // 3: description
                "\"TIME_STAMP\" TEXT," + // 4: timeStamp
                "\"RECEIVE_TIMESTAMP\" TEXT," + // 5: receiveTimestamp
                "\"READ\" INTEGER NOT NULL ," + // 6: read
                "\"NOTIFICATION_TYPE\" TEXT," + // 7: notificationType
                "\"TX_HASH\" TEXT," + // 8: txHash
                "\"TRANSCEIVER\" TEXT," + // 9: transceiver
                "\"TRANSCEIVER_DESCRIPTION\" TEXT," + // 10: transceiverDescription
                "\"BLOCK_NUMBER\" TEXT);"); // 11: blockNumber
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NOTIFICATION_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NotificationBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        String timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindString(5, timeStamp);
        }
 
        String receiveTimestamp = entity.getReceiveTimestamp();
        if (receiveTimestamp != null) {
            stmt.bindString(6, receiveTimestamp);
        }
        stmt.bindLong(7, entity.getRead() ? 1L: 0L);
 
        String notificationType = entity.getNotificationType();
        if (notificationType != null) {
            stmt.bindString(8, notificationType);
        }
 
        String txHash = entity.getTxHash();
        if (txHash != null) {
            stmt.bindString(9, txHash);
        }
 
        String transceiver = entity.getTransceiver();
        if (transceiver != null) {
            stmt.bindString(10, transceiver);
        }
 
        String transceiverDescription = entity.getTransceiverDescription();
        if (transceiverDescription != null) {
            stmt.bindString(11, transceiverDescription);
        }
 
        String blockNumber = entity.getBlockNumber();
        if (blockNumber != null) {
            stmt.bindString(12, blockNumber);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NotificationBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        String timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindString(5, timeStamp);
        }
 
        String receiveTimestamp = entity.getReceiveTimestamp();
        if (receiveTimestamp != null) {
            stmt.bindString(6, receiveTimestamp);
        }
        stmt.bindLong(7, entity.getRead() ? 1L: 0L);
 
        String notificationType = entity.getNotificationType();
        if (notificationType != null) {
            stmt.bindString(8, notificationType);
        }
 
        String txHash = entity.getTxHash();
        if (txHash != null) {
            stmt.bindString(9, txHash);
        }
 
        String transceiver = entity.getTransceiver();
        if (transceiver != null) {
            stmt.bindString(10, transceiver);
        }
 
        String transceiverDescription = entity.getTransceiverDescription();
        if (transceiverDescription != null) {
            stmt.bindString(11, transceiverDescription);
        }
 
        String blockNumber = entity.getBlockNumber();
        if (blockNumber != null) {
            stmt.bindString(12, blockNumber);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public NotificationBean readEntity(Cursor cursor, int offset) {
        NotificationBean entity = new NotificationBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // timeStamp
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // receiveTimestamp
            cursor.getShort(offset + 6) != 0, // read
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // notificationType
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // txHash
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // transceiver
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // transceiverDescription
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // blockNumber
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NotificationBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTimeStamp(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setReceiveTimestamp(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRead(cursor.getShort(offset + 6) != 0);
        entity.setNotificationType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTxHash(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTransceiver(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTransceiverDescription(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBlockNumber(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NotificationBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NotificationBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NotificationBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
