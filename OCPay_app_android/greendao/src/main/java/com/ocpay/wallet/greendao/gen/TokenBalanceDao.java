package com.ocpay.wallet.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ocpay.wallet.greendao.TokenBalance;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TOKEN_BALANCE".
*/
public class TokenBalanceDao extends AbstractDao<TokenBalance, Long> {

    public static final String TABLENAME = "TOKEN_BALANCE";

    /**
     * Properties of entity TokenBalance.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TokenName = new Property(1, String.class, "tokenName", false, "TOKEN_NAME");
        public final static Property WalletAddress = new Property(2, String.class, "walletAddress", false, "WALLET_ADDRESS");
        public final static Property Amount = new Property(3, String.class, "amount", false, "AMOUNT");
    }


    public TokenBalanceDao(DaoConfig config) {
        super(config);
    }
    
    public TokenBalanceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TOKEN_BALANCE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TOKEN_NAME\" TEXT NOT NULL ," + // 1: tokenName
                "\"WALLET_ADDRESS\" TEXT NOT NULL ," + // 2: walletAddress
                "\"AMOUNT\" TEXT);"); // 3: amount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TOKEN_BALANCE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TokenBalance entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTokenName());
        stmt.bindString(3, entity.getWalletAddress());
 
        String amount = entity.getAmount();
        if (amount != null) {
            stmt.bindString(4, amount);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TokenBalance entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTokenName());
        stmt.bindString(3, entity.getWalletAddress());
 
        String amount = entity.getAmount();
        if (amount != null) {
            stmt.bindString(4, amount);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TokenBalance readEntity(Cursor cursor, int offset) {
        TokenBalance entity = new TokenBalance( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // tokenName
            cursor.getString(offset + 2), // walletAddress
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // amount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TokenBalance entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTokenName(cursor.getString(offset + 1));
        entity.setWalletAddress(cursor.getString(offset + 2));
        entity.setAmount(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TokenBalance entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TokenBalance entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TokenBalance entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
