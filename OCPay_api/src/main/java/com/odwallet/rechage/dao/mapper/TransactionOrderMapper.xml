<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.odwallet.rechage.dao.TransactionOrderMapper">
    <resultMap id="BaseResultMap" type="com.odwallet.rechage.entity.TransactionOrder">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="tx_hash" property="txHash" jdbcType="VARCHAR"/>
        <result column="order_status" property="orderStatus" jdbcType="INTEGER"/>
        <result column="from_address" property="fromAddress" jdbcType="VARCHAR"/>
        <result column="to_address" property="toAddress" jdbcType="VARCHAR"/>
        <result column="coin_id" property="coinId" jdbcType="INTEGER"/>
        <result column="coin_name" property="coinName" jdbcType="VARCHAR"/>
        <result column="coin_num" property="coinNum" jdbcType="DECIMAL"/>
        <result column="fee" property="fee" jdbcType="DECIMAL"/>
        <result column="trading_time" property="tradingTime" jdbcType="TIMESTAMP"/>
        <result column="created_time" property="createdTime" jdbcType="TIMESTAMP"/>
        <result column="updated_time" property="updatedTime" jdbcType="TIMESTAMP"/>
        <result column="gas_price" property="gasPrice" jdbcType="DECIMAL"/>
        <result column="used_gas" property="usedGas" jdbcType="DECIMAL"/>
        <result column="transcation_type" property="transcationType" jdbcType="INTEGER"/>
        <result column="callback_status" property="callbackStatus" jdbcType="INTEGER"/>
        <result column="callback_time" property="callbackTime" jdbcType="TIMESTAMP"/>
        <result column="nonce" property="nonce" />
        <result column="gas_limit" property="gasLimit" />
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    id, tx_hash, order_status, from_address, to_address, coin_id, coin_name, coin_num, 
    fee, trading_time, created_time, updated_time, gas_price, used_gas, transcation_type, 
    callback_status, callback_time, nonce, gas_limit
  </sql>
    <select id="selectByExample" resultMap="BaseResultMap"
            parameterType="com.odwallet.rechage.entity.TransactionOrderExample">
        select
        <if test="distinct">
            distinct
        </if>
        'true' as QUERYID,
        <include refid="Base_Column_List"/>
        from transaction_order
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectUnConfirmOrder" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from transaction_order
        WHERE order_status = 1 ORDER BY created_time limit #{selectRow}
    </select>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from transaction_order
        where id = #{id,jdbcType=INTEGER}
    </select>
    <select id="selectByTxHash" resultMap="BaseResultMap" parameterType="string">
        select
        <include refid="Base_Column_List"/>
        from transaction_order
        where tx_hash = #{txHash,jdbcType=VARCHAR}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from transaction_order
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <delete id="deleteByExample" parameterType="com.odwallet.rechage.entity.TransactionOrderExample">
        delete from transaction_order
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.odwallet.rechage.entity.TransactionOrder">
    insert into transaction_order (id, tx_hash, order_status, 
      from_address, to_address, coin_id, 
      coin_name, coin_num, fee, 
      trading_time, created_time, updated_time, 
      gas_price, used_gas, transcation_type, 
      callback_status, callback_time,nonce,gas_limit)
    values (#{id,jdbcType=INTEGER}, #{txHash,jdbcType=VARCHAR}, #{orderStatus,jdbcType=INTEGER}, 
      #{fromAddress,jdbcType=VARCHAR}, #{toAddress,jdbcType=VARCHAR}, #{coinId,jdbcType=INTEGER}, 
      #{coinName,jdbcType=VARCHAR}, #{coinNum,jdbcType=DECIMAL}, #{fee,jdbcType=DECIMAL}, 
      #{tradingTime,jdbcType=TIMESTAMP}, #{createdTime,jdbcType=TIMESTAMP}, #{updatedTime,jdbcType=TIMESTAMP}, 
      #{gasPrice,jdbcType=DECIMAL}, #{usedGas,jdbcType=DECIMAL}, #{transcationType,jdbcType=INTEGER}, 
      #{callbackStatus,jdbcType=INTEGER}, #{callbackTime,jdbcType=TIMESTAMP}, #{nonce},#{gasLimit})
  </insert>
    <insert id="insertSelective" parameterType="com.odwallet.rechage.entity.TransactionOrder">
        insert into transaction_order
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="txHash != null">
                tx_hash,
            </if>
            <if test="orderStatus != null">
                order_status,
            </if>
            <if test="fromAddress != null">
                from_address,
            </if>
            <if test="toAddress != null">
                to_address,
            </if>
            <if test="coinId != null">
                coin_id,
            </if>
            <if test="coinName != null">
                coin_name,
            </if>
            <if test="coinNum != null">
                coin_num,
            </if>
            <if test="fee != null">
                fee,
            </if>
            <if test="tradingTime != null">
                trading_time,
            </if>
            <if test="createdTime != null">
                created_time,
            </if>
            <if test="updatedTime != null">
                updated_time,
            </if>
            <if test="gasPrice != null">
                gas_price,
            </if>
            <if test="usedGas != null">
                used_gas,
            </if>
            <if test="transcationType != null">
                transcation_type,
            </if>
            <if test="callbackStatus != null">
                callback_status,
            </if>
            <if test="callbackTime != null">
                callback_time,
            </if>
            <if test="nonce != null">
                nonce,
            </if>
            <if test="gasLimit != null">
                gas_limit,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="txHash != null">
                #{txHash,jdbcType=VARCHAR},
            </if>
            <if test="orderStatus != null">
                #{orderStatus,jdbcType=INTEGER},
            </if>
            <if test="fromAddress != null">
                #{fromAddress,jdbcType=VARCHAR},
            </if>
            <if test="toAddress != null">
                #{toAddress,jdbcType=VARCHAR},
            </if>
            <if test="coinId != null">
                #{coinId,jdbcType=INTEGER},
            </if>
            <if test="coinName != null">
                #{coinName,jdbcType=VARCHAR},
            </if>
            <if test="coinNum != null">
                #{coinNum,jdbcType=DECIMAL},
            </if>
            <if test="fee != null">
                #{fee,jdbcType=DECIMAL},
            </if>
            <if test="tradingTime != null">
                #{tradingTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createdTime != null">
                #{createdTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updatedTime != null">
                #{updatedTime,jdbcType=TIMESTAMP},
            </if>
            <if test="gasPrice != null">
                #{gasPrice,jdbcType=DECIMAL},
            </if>
            <if test="usedGas != null">
                #{usedGas,jdbcType=DECIMAL},
            </if>
            <if test="transcationType != null">
                #{transcationType,jdbcType=INTEGER},
            </if>
            <if test="callbackStatus != null">
                #{callbackStatus,jdbcType=INTEGER},
            </if>
            <if test="callbackTime != null">
                #{callbackTime,jdbcType=TIMESTAMP},
            </if>
            <if test="nonce != null">
                #{nonce},
            </if>
            <if test="gasLimit != null">
                #{gasLimit},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.odwallet.rechage.entity.TransactionOrderExample"
            resultType="java.lang.Integer">
        select count(*) from transaction_order
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update transaction_order
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.txHash != null">
                tx_hash = #{record.txHash,jdbcType=VARCHAR},
            </if>
            <if test="record.orderStatus != null">
                order_status = #{record.orderStatus,jdbcType=INTEGER},
            </if>
            <if test="record.fromAddress != null">
                from_address = #{record.fromAddress,jdbcType=VARCHAR},
            </if>
            <if test="record.toAddress != null">
                to_address = #{record.toAddress,jdbcType=VARCHAR},
            </if>
            <if test="record.coinId != null">
                coin_id = #{record.coinId,jdbcType=INTEGER},
            </if>
            <if test="record.coinName != null">
                coin_name = #{record.coinName,jdbcType=VARCHAR},
            </if>
            <if test="record.coinNum != null">
                coin_num = #{record.coinNum,jdbcType=DECIMAL},
            </if>
            <if test="record.fee != null">
                fee = #{record.fee,jdbcType=DECIMAL},
            </if>
            <if test="record.tradingTime != null">
                trading_time = #{record.tradingTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.createdTime != null">
                created_time = #{record.createdTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.updatedTime != null">
                updated_time = #{record.updatedTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.gasPrice != null">
                gas_price = #{record.gasPrice,jdbcType=DECIMAL},
            </if>
            <if test="record.usedGas != null">
                used_gas = #{record.usedGas,jdbcType=DECIMAL},
            </if>
            <if test="record.transcationType != null">
                transcation_type = #{record.transcationType,jdbcType=INTEGER},
            </if>
            <if test="record.callbackStatus != null">
                callback_status = #{record.callbackStatus,jdbcType=INTEGER},
            </if>
            <if test="record.callbackTime != null">
                callback_time = #{record.callbackTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.nonce != null">
                nonce = #{record.nonce},
            </if>
            <if test="record.gasLimit != null">
                gas_limit = #{record.gasLimit},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update transaction_order
        set id = #{record.id,jdbcType=INTEGER},
        tx_hash = #{record.txHash,jdbcType=VARCHAR},
        order_status = #{record.orderStatus,jdbcType=INTEGER},
        from_address = #{record.fromAddress,jdbcType=VARCHAR},
        to_address = #{record.toAddress,jdbcType=VARCHAR},
        coin_id = #{record.coinId,jdbcType=INTEGER},
        coin_name = #{record.coinName,jdbcType=VARCHAR},
        coin_num = #{record.coinNum,jdbcType=DECIMAL},
        fee = #{record.fee,jdbcType=DECIMAL},
        trading_time = #{record.tradingTime,jdbcType=TIMESTAMP},
        created_time = #{record.createdTime,jdbcType=TIMESTAMP},
        updated_time = #{record.updatedTime,jdbcType=TIMESTAMP},
        gas_price = #{record.gasPrice,jdbcType=DECIMAL},
        used_gas = #{record.usedGas,jdbcType=DECIMAL},
        transcation_type = #{record.transcationType,jdbcType=INTEGER},
        callback_status = #{record.callbackStatus,jdbcType=INTEGER},
        callback_time = #{record.callbackTime,jdbcType=TIMESTAMP},
        nonce = #{record.nonce},
        gas_limit = #{record.gasLimit}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.odwallet.rechage.entity.TransactionOrder">
        update transaction_order
        <set>
            <if test="txHash != null">
                tx_hash = #{txHash,jdbcType=VARCHAR},
            </if>
            <if test="orderStatus != null">
                order_status = #{orderStatus,jdbcType=INTEGER},
            </if>
            <if test="fromAddress != null">
                from_address = #{fromAddress,jdbcType=VARCHAR},
            </if>
            <if test="toAddress != null">
                to_address = #{toAddress,jdbcType=VARCHAR},
            </if>
            <if test="coinId != null">
                coin_id = #{coinId,jdbcType=INTEGER},
            </if>
            <if test="coinName != null">
                coin_name = #{coinName,jdbcType=VARCHAR},
            </if>
            <if test="coinNum != null">
                coin_num = #{coinNum,jdbcType=DECIMAL},
            </if>
            <if test="fee != null">
                fee = #{fee,jdbcType=DECIMAL},
            </if>
            <if test="tradingTime != null">
                trading_time = #{tradingTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createdTime != null">
                created_time = #{createdTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updatedTime != null">
                updated_time = #{updatedTime,jdbcType=TIMESTAMP},
            </if>
            <if test="gasPrice != null">
                gas_price = #{gasPrice,jdbcType=DECIMAL},
            </if>
            <if test="usedGas != null">
                used_gas = #{usedGas,jdbcType=DECIMAL},
            </if>
            <if test="transcationType != null">
                transcation_type = #{transcationType,jdbcType=INTEGER},
            </if>
            <if test="callbackStatus != null">
                callback_status = #{callbackStatus,jdbcType=INTEGER},
            </if>
            <if test="callbackTime != null">
                callback_time = #{callbackTime,jdbcType=TIMESTAMP},
            </if>
            <if test="nonce != null">
                nonce = #{nonce},
            </if>
            <if test="gasLimit != null">
                gas_limit = #{gasLimit},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.odwallet.rechage.entity.TransactionOrder">
    update transaction_order
    set tx_hash = #{txHash,jdbcType=VARCHAR},
      order_status = #{orderStatus,jdbcType=INTEGER},
      from_address = #{fromAddress,jdbcType=VARCHAR},
      to_address = #{toAddress,jdbcType=VARCHAR},
      coin_id = #{coinId,jdbcType=INTEGER},
      coin_name = #{coinName,jdbcType=VARCHAR},
      coin_num = #{coinNum,jdbcType=DECIMAL},
      fee = #{fee,jdbcType=DECIMAL},
      trading_time = #{tradingTime,jdbcType=TIMESTAMP},
      created_time = #{createdTime,jdbcType=TIMESTAMP},
      updated_time = #{updatedTime,jdbcType=TIMESTAMP},
      gas_price = #{gasPrice,jdbcType=DECIMAL},
      used_gas = #{usedGas,jdbcType=DECIMAL},
      transcation_type = #{transcationType,jdbcType=INTEGER},
      callback_status = #{callbackStatus,jdbcType=INTEGER},
      callback_time = #{callbackTime,jdbcType=TIMESTAMP},
      nonce = #{nonce},
      gas_limit = #{gasLimit}
    where id = #{id,jdbcType=INTEGER}
  </update>
    <update id="updateByPrimaryKeyAndOrderStatus" parameterType="com.odwallet.rechage.entity.TransactionOrder" >
        update transaction_order
        set order_status = #{orderStatus,jdbcType=INTEGER},
        trading_time = #{tradingTime,jdbcType=TIMESTAMP},
        updated_time = #{updatedTime,jdbcType=TIMESTAMP},
        where tx_hash = #{txHash,jdbcType=VARCHAR} and order_status != 2
    </update>
</mapper>